/*
 * This file is generated by jOOQ.
 */
package kotlin_spring.models.tables


import java.time.LocalDateTime

import kotlin.collections.List

import kotlin_spring.models.Public
import kotlin_spring.models.keys.TB_USERS_PKEY
import kotlin_spring.models.keys.TB_USERS_USER_CPF_KEY
import kotlin_spring.models.keys.TB_USERS_USER_EMAIL_KEY
import kotlin_spring.models.keys.TB_USERS_USER_PHONE_KEY
import kotlin_spring.models.tables.records.TbUsersRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TbUsers(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TbUsersRecord>?,
    aliased: Table<TbUsersRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TbUsersRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.tb_users</code>
         */
        val TB_USERS = TbUsers()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TbUsersRecord> = TbUsersRecord::class.java

    /**
     * The column <code>public.tb_users.user_id</code>.
     */
    val USER_ID: TableField<TbUsersRecord, Int?> = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.tb_users.user_name</code>.
     */
    val USER_NAME: TableField<TbUsersRecord, String?> = createField(DSL.name("user_name"), SQLDataType.VARCHAR(200).nullable(false), this, "")

    /**
     * The column <code>public.tb_users.user_birthdate</code>.
     */
    val USER_BIRTHDATE: TableField<TbUsersRecord, LocalDateTime?> = createField(DSL.name("user_birthdate"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "")

    /**
     * The column <code>public.tb_users.user_cpf</code>.
     */
    val USER_CPF: TableField<TbUsersRecord, String?> = createField(DSL.name("user_cpf"), SQLDataType.VARCHAR(11).nullable(false), this, "")

    /**
     * The column <code>public.tb_users.user_email</code>.
     */
    val USER_EMAIL: TableField<TbUsersRecord, String?> = createField(DSL.name("user_email"), SQLDataType.VARCHAR(150).nullable(false), this, "")

    /**
     * The column <code>public.tb_users.user_phone</code>.
     */
    val USER_PHONE: TableField<TbUsersRecord, String?> = createField(DSL.name("user_phone"), SQLDataType.VARCHAR(11).nullable(false), this, "")

    /**
     * The column <code>public.tb_users.user_role</code>.
     */
    val USER_ROLE: TableField<TbUsersRecord, String?> = createField(DSL.name("user_role"), SQLDataType.VARCHAR(10).nullable(false), this, "")

    /**
     * The column <code>public.tb_users.user_password</code>.
     */
    val USER_PASSWORD: TableField<TbUsersRecord, String?> = createField(DSL.name("user_password"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<TbUsersRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TbUsersRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.tb_users</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.tb_users</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.tb_users</code> table reference
     */
    constructor(): this(DSL.name("tb_users"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TbUsersRecord>): this(Internal.createPathAlias(child, key), child, key, TB_USERS, null)
    override fun getSchema(): Schema = Public.PUBLIC
    override fun getIdentity(): Identity<TbUsersRecord, Int?> = super.getIdentity() as Identity<TbUsersRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<TbUsersRecord> = TB_USERS_PKEY
    override fun getKeys(): List<UniqueKey<TbUsersRecord>> = listOf(TB_USERS_PKEY, TB_USERS_USER_CPF_KEY, TB_USERS_USER_EMAIL_KEY, TB_USERS_USER_PHONE_KEY)
    override fun `as`(alias: String): TbUsers = TbUsers(DSL.name(alias), this)
    override fun `as`(alias: Name): TbUsers = TbUsers(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TbUsers = TbUsers(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TbUsers = TbUsers(name, null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<Int?, String?, LocalDateTime?, String?, String?, String?, String?, String?> = super.fieldsRow() as Row8<Int?, String?, LocalDateTime?, String?, String?, String?, String?, String?>
}
