/*
 * This file is generated by jOOQ.
 */
package kotlin_spring.models.tables.records


import com.fasterxml.jackson.annotation.JsonAutoDetect
import java.time.LocalDateTime

import kotlin_spring.models.tables.TbUsers

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY)
@Suppress("UNCHECKED_CAST")
open class TbUsersRecord() : UpdatableRecordImpl<TbUsersRecord>(TbUsers.TB_USERS), Record8<Int?, String?, LocalDateTime?, String?, String?, String?, String?, String?> {

    var userId: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var userName: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var userBirthdate: LocalDateTime?
        set(value) = set(2, value)
        get() = get(2) as LocalDateTime?

    var userCpf: String?
        set(value) = set(3, value)
        get() = get(3) as String?

    var userEmail: String?
        set(value) = set(4, value)
        get() = get(4) as String?

    var userPhone: String?
        set(value) = set(5, value)
        get() = get(5) as String?

    var userRole: String?
        set(value) = set(6, value)
        get() = get(6) as String?

    var userPassword: String?
        set(value) = set(7, value)
        get() = get(7) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Int?, String?, LocalDateTime?, String?, String?, String?, String?, String?> = super.fieldsRow() as Row8<Int?, String?, LocalDateTime?, String?, String?, String?, String?, String?>
    override fun valuesRow(): Row8<Int?, String?, LocalDateTime?, String?, String?, String?, String?, String?> = super.valuesRow() as Row8<Int?, String?, LocalDateTime?, String?, String?, String?, String?, String?>
    override fun field1(): Field<Int?> = TbUsers.TB_USERS.USER_ID
    override fun field2(): Field<String?> = TbUsers.TB_USERS.USER_NAME
    override fun field3(): Field<LocalDateTime?> = TbUsers.TB_USERS.USER_BIRTHDATE
    override fun field4(): Field<String?> = TbUsers.TB_USERS.USER_CPF
    override fun field5(): Field<String?> = TbUsers.TB_USERS.USER_EMAIL
    override fun field6(): Field<String?> = TbUsers.TB_USERS.USER_PHONE
    override fun field7(): Field<String?> = TbUsers.TB_USERS.USER_ROLE
    override fun field8(): Field<String?> = TbUsers.TB_USERS.USER_PASSWORD
    override fun component1(): Int? = userId
    override fun component2(): String? = userName
    override fun component3(): LocalDateTime? = userBirthdate
    override fun component4(): String? = userCpf
    override fun component5(): String? = userEmail
    override fun component6(): String? = userPhone
    override fun component7(): String? = userRole
    override fun component8(): String? = userPassword
    override fun value1(): Int? = userId
    override fun value2(): String? = userName
    override fun value3(): LocalDateTime? = userBirthdate
    override fun value4(): String? = userCpf
    override fun value5(): String? = userEmail
    override fun value6(): String? = userPhone
    override fun value7(): String? = userRole
    override fun value8(): String? = userPassword

    override fun value1(value: Int?): TbUsersRecord {
        this.userId = value
        return this
    }

    override fun value2(value: String?): TbUsersRecord {
        this.userName = value
        return this
    }

    override fun value3(value: LocalDateTime?): TbUsersRecord {
        this.userBirthdate = value
        return this
    }

    override fun value4(value: String?): TbUsersRecord {
        this.userCpf = value
        return this
    }

    override fun value5(value: String?): TbUsersRecord {
        this.userEmail = value
        return this
    }

    override fun value6(value: String?): TbUsersRecord {
        this.userPhone = value
        return this
    }

    override fun value7(value: String?): TbUsersRecord {
        this.userRole = value
        return this
    }

    override fun value8(value: String?): TbUsersRecord {
        this.userPassword = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: LocalDateTime?, value4: String?, value5: String?, value6: String?, value7: String?, value8: String?): TbUsersRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised TbUsersRecord
     */
    constructor(userId: Int? = null, userName: String? = null, userBirthdate: LocalDateTime? = null, userCpf: String? = null, userEmail: String? = null, userPhone: String? = null, userRole: String? = null, userPassword: String? = null): this() {
        this.userId = userId
        this.userName = userName
        this.userBirthdate = userBirthdate
        this.userCpf = userCpf
        this.userEmail = userEmail
        this.userPhone = userPhone
        this.userRole = userRole
        this.userPassword = userPassword
    }
}
